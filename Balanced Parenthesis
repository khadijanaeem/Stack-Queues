#include <iostream>
using namespace std;

template <class T>
class Stack
{
    class Node
    {
    public:
        T data;
        Node *link;

    public:
        Node()
        {
            link = NULL;
        }
        Node(T d)
        {
            data = d;
            link = NULL;
        }
    };

public:
    Node *topp;
    int s;

    Stack()
    {
        topp = NULL;
        s = 0;
    }
    void Push(T d)
    {
        Node *newnode = new Node;
        if (newnode == NULL)
        {
            cout << "Stack Overflow" << endl;
            exit(1);
        }

        newnode->data = d;
        newnode->link = NULL;
        newnode->link = topp;
        topp = newnode; // opdate top ptr
        s++;
    }
    bool IsEmpty()
    {
        if (topp == NULL)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    void Pop()
    {
        if (IsEmpty())
        {
            cout << "Stack Underflow " << endl;
            exit(1);
        }
        Node *temp;
        temp = topp;
        topp = topp->link;
        delete temp;
    }

    T Top()
    {
        if (IsEmpty())
        {
            cout << "Stack Underflow " << endl;
            exit(1);
        }

        return topp->data;
    }
    int size()
    {
        return s;
    }
    void display()
    {
        Node *temp = topp;
        while (temp != NULL)
        {
            cout << temp->data << "  ";
            temp = temp->link;
            if (temp != NULL)
            {
                cout << "->";
            }
        }
    }
};

void BalancedParenthesis(string s)
{
    Stack<char> ch;
    int n = s.length();
    for (int i = 0; i < n; i++)
    {
        if (s[i] == '[' || s[i] == '{' || s[i] == '(')
        {
            ch.Push(s[i]);
        }
        else if (s[i] == ')')
        {
            char cmp = ch.Top();
            ch.Pop();
            if (cmp != '(')
            {
                cout << "Not Balanced" << endl;
                return ;
            }
        }
        else if (s[i] == ']')
        {
            char cmp = ch.Top();
            ch.Pop();
            if (cmp != '[')
            {
                cout << "Not Balanced" << endl;
                return;
            }
        }
        else if (s[i] == '}')
        {
            char cmp = ch.Top();
            ch.Pop();
            if (cmp != '{')
            {
                cout << "Not Balanced" << endl;
                return;
            }
        }
    }
    cout << " Balanced" << endl;
}

int main(){
    //Balanced Parenthesis
    string s;
    cout << "Enter the string " << endl;
    cin >> s;
    cout << s << " " << endl;
    BalancedParenthesis(s);




}
